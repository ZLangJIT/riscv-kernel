name: Kernel CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # manual trigger
  schedule:
    - cron: '0 0 * * *' # https://crontab.guru

env:
  IS_LTS: NO

jobs:
  build:
    runs-on: ubuntu-latest
    container: locietta/loia-dev-base:latest
    outputs:
      current_version: ${{ steps.out.outputs.current_version }}
      release_version: ${{ steps.out.outputs.release_version }}
      clang_version:   ${{ steps.out.outputs.clang_version }}
      rebuild_flag:    ${{ steps.out.outputs.rebuild_flag }}

    strategy:
      matrix:
        include:
          - arch: riscv
            image-name: vmlinux-riscv64

    steps:

    - uses: actions/checkout@main

    - name: Trust this directory
      run: git config --global --add safe.directory '*' # v2.35.3 or later

    - name: System upgrade
      run: |
        pacman -Syu --noconfirm

    - name: install important packages
      run: |
        pacman -S --noconfirm ccache zip unzip

    - name: Initialize ccache -
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: 2048M
        key: ${{ github.job }}-${{ matrix.arch }}

    - name: Prepare source code
      shell: bash
      run: |
        #export VERSION_BRANCH=v6.11
        #git clone https://github.com/torvalds/linux -b $VERSION_BRANCH --depth 1 linux
        #cd linux && ../config.sh
        #scripts/config -d riscv # avoid override warning for duplicate arch flags 
        #scripts/config -e ${{ matrix.arch }}

        # Load version info into env
        export CURRENT_VERSION=$(grep 'LOCALVERSION=' ./riscv_defconfig | sed 's/^.*[^0-9]\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/')
        # must query with a token, or will fail with ai rate limit on public runners
        export RELEASED_TAG=$(curl -sL -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'\
         https://api.github.com/repos/ZLangJIT/riscv-kernel/tags\?per_page\=60 | jq -r '.[].name' | grep -v 'lts' | head -n 1)
        export RELEASED_VERSION=$(echo $RELEASED_TAG | sed 's/^.*[^0-9]\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/' )
        export RELEASED_MINOR=$(echo $RELEASED_TAG | sed 's/^.*[^0-9][0-9]*\.\([0-9]*\)\.[0-9]*\.*$/\1/' )

        echo "CURRENT_VERSION=$CURRENT_VERSION" | tee -a $GITHUB_ENV
        echo "RELEASED_VERSION=$RELEASED_VERSION" | tee -a $GITHUB_ENV

        if [[ $CURRENT_VERSION != $RELEASED_VERSION || \
              ($CURRENT_VERSION = $RELEASED_VERSION && 1 -gt "$RELEASED_MINOR") || \
              "${{ github.event_name }}" = 'pull_request' ]]; then
          echo "REBUILD_FLAG=" | tee -a $GITHUB_ENV # set to 1 to enable building, set to '' to skip building
        else
          echo "REBUILD_FLAG=" | tee -a $GITHUB_ENV
        fi
        cp monitor_memory.sh /tmp/monitor_memory.sh ; chmod +x /tmp/monitor_memory.sh
        pacman -S --noconfirm rsync wget
        useradd -m build
        echo "build ALL=(ALL:ALL) ALL" >> /etc/sudoers
        mkdir build_dir
        chown build:build build_dir
        chmod 777 build_dir

    - name: Install dependencies
      if: ${{ env.REBUILD_FLAG }}
      id: dep
      run: |
        pacman -Ss riscv
        pacman -S --noconfirm pahole xmlto inetutils bc cpio jq llvm llvm-libs clang lld zip unzip
        pacman -S --noconfirm riscv64-linux-gnu-gcc riscv64-linux-gnu-glibc riscv64-linux-gnu-linux-api-headers
        pacman -S --noconfirm riscv64-unknown-elf-gcc
        which riscv64-linux-gnu-gcc || true
        which riscv64-unknown-elf-gcc || true
        set -v
        ln -s /usr/riscv64-linux-gnu/include/linux /usr/riscv64-linux-gnu/usr/include/linux || true
        ls -lahp /usr/riscv64-linux-gnu/usr/include/linux/version.h || true
        ls -lahp /usr/riscv64-linux-gnu/include/linux/version.h || true
        echo "CLANG_VERSION=$(pacman -Qs clang | grep local/clang | sed 's#^.*local\/clang.*[^0-9]\(.*\) (\(.*\))#\1#')" | tee -a $GITHUB_ENV

    - name: Clone buildroot
      if: ${{ env.REBUILD_FLAG }}
      run: |
        su --command="cd build_dir ; git clone https://github.com/ATS-INTC/buildroot.git --depth=1 buildroot" build

    - name: Build rootfs [buildroot]
      if: ${{ env.REBUILD_FLAG }}
      run: |
        if [ "$(cat /sys/devices/system/cpu/smt/active)" = "1" ]; then
            export LOGICAL_CORES=$(($(nproc --all) * 2))
        else
            export LOGICAL_CORES=$(nproc --all)
        fi
        su --command="echo building with $LOGICAL_CORES logical cores ; cd build_dir/buildroot ; git apply ../../buildroot_gcc14.patch ; git apply ../../buildroot_init.patch ; cp ../../.buildrootconfig .config ; /tmp/monitor_memory.sh & make CC='ccache clang -Qunused-arguments -fcolor-diagnostics' ARCH=riscv LLVM=1 LLVM_IAS=1 -j$LOGICAL_CORES" build

    - name: Copy rootfs [buildroot]
      if: ${{ env.REBUILD_FLAG }}
      run: |
        su --command="cd build_dir/buildroot ; pwd ; ls -lahp output/images ; cp output/images/rootfs.cpio ../rootfs.cpio" build
        sha256sum build_dir/rootfs.cpio > build_dir/rootfs.cpio.sha256

    - name: Remove buildroot
      if: ${{ env.REBUILD_FLAG }}
      run: |
        rm -rf build_dir/buildroot

    - name: Clone linux 6.11
      if: ${{ env.REBUILD_FLAG }}
      run: |
        su --command="cd build_dir ; git clone https://github.com/torvalds/linux -b v6.11 --depth 1 linux-xlnx" build

    - name: Build kernel [linux 6.11]
      if: ${{ env.REBUILD_FLAG }}
      run: |
        if [ "$(cat /sys/devices/system/cpu/smt/active)" = "1" ]; then
            export LOGICAL_CORES=$(($(nproc --all) * 2))
        else
            export LOGICAL_CORES=$(nproc --all)
        fi
        su --command="echo building with $LOGICAL_CORES logical cores ; cd build_dir/linux-xlnx ; ls -lhap .. ; cp ../../.linuxconfig .config ; /tmp/monitor_memory.sh & make CC='ccache clang -Qunused-arguments -fcolor-diagnostics' ARCH=riscv LLVM=1 LLVM_IAS=1 -j$LOGICAL_CORES V=2" build

    - name: Copy kernel [linux 6.11]
      if: ${{ env.REBUILD_FLAG }}
      run: |
        su --command="cd build_dir/linux-xlnx ; pwd ; ls -lahp arch/riscv/boot ; pwd ; ls -l ; cp arch/riscv/boot/Image ../Image ; cp arch/riscv/boot/Image.gz ../Image.gz ; cp vmlinux ../vmlinux" build
        sha256sum build_dir/Image > build_dir/Image.sha256
        sha256sum build_dir/Image.gz > build_dir/Image.gz.sha256
        sha256sum build_dir/vmlinux > build_dir/vmlinux.sha256

    - name: Remove linux 6.11
      if: ${{ env.REBUILD_FLAG }}
      run: |
        rm -rf build_dir/linux-xlnx

    - name: Install android commandline-tools + JDK17
      run: |
        TOOLS_URL=$(wget -qO- http://developer.android.com/sdk/index.html | grep latest.zip | grep linux | grep href | grep -o https.*zip)
        TOOLS_FILE=$(echo $TOOLS_URL | grep -o command.*zip)
        cd / ; echo "downloading $TOOLS_FILE ..." ; wget -q $TOOLS_URL -O $TOOLS_FILE ; unzip $TOOLS_FILE ; bash -c "rm $TOOLS_FILE || true"
        pacman -S --noconfirm jdk17-openjdk
        archlinux-java status

    - name: Init env
      run: |
        FILE=~/.bashrc
        echo "export ANDROID_HOME=/android-sdk" >> $FILE
        echo "export ANDROID_SDK=/android-sdk" >> $FILE
        echo "export ANDROID_SDK_ROOT=/android-sdk" >> $FILE
        echo "export ANDROID_SDK_PATH=/android-sdk" >> $FILE
        echo "export PATH=$PATH:/android-sdk/platform-tools" >> $FILE

    - name: Test sdkmanager
      shell: bash
      run: |
        . ~/.bashrc
        export PATH=$PATH:/cmdline-tools/bin
        echo $PATH
        which sdkmanager
        sdkmanager --help || true # sdkmanager exits with code 1

    - name: List sdkmanager packages
      shell: bash
      run: |
        . ~/.bashrc
        export PATH=$PATH:/cmdline-tools/bin
        sdkmanager --list --sdk_root=/android-sdk || true

    - name: Accept sdkmanager Licenses
      shell: bash
      run: |
        . ~/.bashrc
        export PATH=$PATH:/cmdline-tools/bin
        yes | sdkmanager --licenses --sdk_root=/android-sdk || true

    - name: Verify sdkmanager Licenses
      shell: bash
      run: |
        . ~/.bashrc
        export PATH=$PATH:/cmdline-tools/bin
        yes | sdkmanager --licenses --sdk_root=/android-sdk || true

    - name: Install sdkmanager cmdline-tools
      shell: bash
      run: |
        . ~/.bashrc
        export PATH=$PATH:/cmdline-tools/bin
        sdkmanager --install commandline-tools:latest --sdk_root=/android-sdk || true
        ls -l /android-sdk
        ls -l /android-sdk/cmdline-tools
        ls -l /android-sdk/cmdline-tools/latest
        ls -l /android-sdk/cmdline-tools/latest/bin

    - name: Switch to sdkmanager cmdline-tools
      shell: bash
      run: |
        echo "export PATH=$PATH:/android-sdk/cmdline-tools/latest/bin" >> ~/.bashrc
        rm -rf /cmdline-tools*

    - name: Grant execute permission for gradlew
      run: |
        chmod +x android/gradlew

    - name: Build with Gradle
      shell: bash
      run: |
        . ~/.bashrc
        cd android ; ./gradlew build

    - name: Build debug APK
      shell: bash
      run: |
        . ~/.bashrc
        cd android ; ./gradlew assembleDebug --stacktrace

    - name: Check files
      run: |
        ls -al android/app/build/outputs/apk/debug
        TAG=6.11.26 # use kernel from 6.11.26
        cd build_dir ; wget https://github.com/ZLangJIT/riscv-kernel/releases/download/$TAG/rootfs.cpio
        cd build_dir ; wget https://github.com/ZLangJIT/riscv-kernel/releases/download/$TAG/rootfs.cpio.sha256
        cd build_dir ; wget https://github.com/ZLangJIT/riscv-kernel/releases/download/$TAG/Image
        cd build_dir ; wget https://github.com/ZLangJIT/riscv-kernel/releases/download/$TAG/Image.sha256
        cd build_dir ; wget https://github.com/ZLangJIT/riscv-kernel/releases/download/$TAG/Image.gz
        cd build_dir ; wget https://github.com/ZLangJIT/riscv-kernel/releases/download/$TAG/Image.gz.sha256
        cd build_dir ; wget https://github.com/ZLangJIT/riscv-kernel/releases/download/$TAG/vmlinux
        cd build_dir ; wget https://github.com/ZLangJIT/riscv-kernel/releases/download/$TAG/vmlinux.sha256

    - name: Upload files
      uses: actions/upload-artifact@main
      if: ${{ env.REBUILD_FLAG }} || 1 # always upload for now
      with:
        name: upload
        path: |
          android/app/build/outputs/apk/debug/app-debug.apk
          build_dir/rootfs.cpio
          build_dir/rootfs.cpio.sha256
          build_dir/Image
          build_dir/Image.sha256
          build_dir/Image.gz
          build_dir/Image.gz.sha256
          build_dir/vmlinux
          build_dir/vmlinux.sha256

    - id: out
      run: |
        echo "current_version=${{ env.CURRENT_VERSION }}" >> $GITHUB_OUTPUT
        echo "release_version=${{ env.RELEASED_VERSION }}" >> $GITHUB_OUTPUT
        echo "clang_version=${{ env.CLANG_VERSION }}" >> $GITHUB_OUTPUT
        echo "rebuild_flag=${{ env.REBUILD_FLAG }}" >> $GITHUB_OUTPUT

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@main
    - uses: actions/download-artifact@main
      with:
        path: release_images/

    - id: fetch_commit_sha
      run: |
        if [ ${{ github.event_name }} = 'pull_request' ]; then
          echo "sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=${{ needs.build.outputs.current_version }}-PR" | tee -a $GITHUB_ENV
        else
          echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=${{ needs.build.outputs.current_version }}" | tee -a $GITHUB_ENV
        fi

    - name: Release
      uses: softprops/action-gh-release@master
      if: ${{ needs.build.outputs.rebuild_flag }}
      with:
        name:  ${{ env.RELEASE_TAG }}
        tag_name:  ${{ env.RELEASE_TAG }}
        draft: ${{ github.event_name == 'pull_request' }}
        target_commitish: ${{ steps.fetch_commit_sha.outputs.sha }}
        body: |
          RISC-V linux kernel, built with Clang ${{ needs.build.outputs.clang_version }}

          * `vmlinux` for riscv ( built-in busybox ramdisk )
          * `Image` for riscv ( built-in busybox ramdisk )
          * `Image.gz` for riscv ( built-in busybox ramdisk )

        files: |
          release_images/*/*
        token: ${{ secrets.GITHUB_TOKEN }}
        # generate_release_notes: true
        fail_on_unmatched_files: true
